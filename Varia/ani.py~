#!/usr/bin/python
#14-02-2014 pieter.stragier@ugent.be v0.1
# Computes the ANI similarity value between two given complete genome sequences. If a genome sequence is 
# contained within a directory, all chromosomes of the genome sequences are merged before the genomes are 
# compared with each other.
#
# INPUT
#   seq1  GenBank file or directory containing GenBank files for the same genome
#   seq2  GenBank file or directory containing GenBank files for the same genome
#   -p    optional prefix used for creation of temporary file names (default: "ANI")
#   -t    optional directory for storage of temporary files (default: "/tmp")
#
# syntax: ani [-p prefix] [-t tmp_dir] seq1 seq2

#Dependencys: blast, emboss

######################################################################################
# NO changes lower than here!!!  (unless you know what your doing)
######################################################################################

#Process command line options
import optparse # needed for reading the options 
import os   # needed for file and directory handling
import itertools # needed for making combinations
import pprint   # needed for prittyprint pprint nice debug

def processcommandline():
    
    desc="""
    # This program runs an ANI analysis from the source files in the directory
    # # INPUT
    #   LMGxxxx.fa : a fasta file (.fa, .faa, .fasta, .fas)
    #   Single or multifasta file
    #OPTIONS
    #    -g --genbank_input   
    #    -t --temp_dir
    #    -i --input_dir    Input directory
    #    -d --debug        debug information progres and messages
    #    -v --verbose  verbose progress and messages
    #
    # usage: ani.py [options ] <seq1> <seq2>
    # syntax: ani.py -g -t /tmp -i /Fasta -s1 seq1 -s2 seq2 > save file
    # syntax: ani.py seq1 seq2
    """
    # Makes variable options anywhere available
    global options
    global args
    parser = optparse.OptionParser(  description=desc,
                            usage="usage: %prog [options] input_cvv_file ",
                            version='%prog version 0.1')

    parser.add_option("-c", "--csv_delimiter_input",
                       action="store",
                      dest="o_csv_delimiter_input_value",
                       default=";",
                      help="Defines the delimiter value of the source file, default is set to ;")
                                           
    parser.add_option("-C", "--csv_delimiter_output",
                       action="store",
                      dest="o_csv_delimiter_output_value",
                       default="\t",
                      help="Defines the delimiter value of the output, default is set to \t")
    parser.add_option("-d", "--debug",
                      action="store_true",
                      dest="o_debug_flag",
                      default=False,
                      help="Writes all kinds of debug info, step by step, and progres not good for piping")

    parser.add_option("-g", "--graph",
                      action="store_true",
                      dest="o_graph_flag",
                      default=False,
                      help="Makes a output easy for making graphs (there is los of data)")

    parser.add_option("-v", "--verbose",
                      action="store_true",
                      dest="o_verbose_flag",
                      default=False,
                      help="Writes all kinds of info for folowing progress, not good for piping")
                      
    (options, args) = parser.parse_args()   # splits the options and the arguments

    #Way of accessing the options
    #print "option save file default" +options.o_save_file

    if len(args) < 1:
        parser.error("wrong number of arguments")
        
    if options.o_verbose_flag or options.o_debug_flag:
        print("options: ")
        print(options)
        print("Arguments: ")
        print(args)
    
    #    #Test if all arguments (1 and 2) of args are file names or directories and are valid
    #    if not os.path.isfile(args[0]) or not os.path.isfile(args[1]):
    #        parser.error("wrong number of arguments, only files and directories can be passed")
    
    #    #Set automatically -D diagonal value when making a full matrix
    #    if options.o_full_matrix_flag:
    #        #user did not choose a value for the diagonal
    #        if options.o_diagonal_flag is None:
    #            options.o_diagonal_flag= str(100)

            
    # flags are filled and processed (arguments in correct file extension?)
    #test 1 file
    
def main():
    processcommandline()    
    #debug test section
    dict_input=read_input_file(args[0])
    result_cgi_matrix=calculate_cgi(dict_input)
        
    dict_gelijke_pieken_per_combinatie=result_cgi_matrix["dict_gelijke_pieken_per_combinatie"]
    list_all_combinations=result_cgi_matrix["list_all_combinations"]
    

    #graph output chosen
    if options.o_graph_flag :
        print_gem_gelijke_pieken_voor_grafiek(dict_gelijke_pieken_per_combinatie,list_all_combinations)
        
    #default complete output
    else:
        print_gelijke_pieken(dict_gelijke_pieken_per_combinatie,list_all_combinations)